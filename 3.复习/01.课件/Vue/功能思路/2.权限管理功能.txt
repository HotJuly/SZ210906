权限分配:
	1.管理员
		管理员可以添加新的帐号,并且分配权限
	2.访客	
		访客一般只能看见部分路由数据
		

需求:根据当前账号的权限,来控制其所能访问的路由
拆解:
	1.根据当前账号的权限
		每个账号的权限都不一样
		当登录帐号之后,后端会返回该账号的权限信息交给前端
		一般公司都会有两个接口,一个是login登录帐号接口,用于返回当前用户的token字符串
					另外一个是info接口,用于根据用户的token来查找返回用户相关信息数据

		info接口返回的数据中,具有一个routes数组,该数组中记录着用户所有能够访问的路由名称

		问题:为什么需要将获取用户信息分为两个接口?
		解答:
			其实是为了方便实现7天免登陆功能,如果用户7天之内已经登陆过了,电脑上就会存储这token字符串,
			也就是说二次登陆的时候,用户可以直接使用上次的token来请求相关信息数据,不需要在经过登录界面

	2.控制其所能访问的路由
		


		一般分为两种做法:
			1.使用导航守卫,配合roles以及预设权限进行路由跳转控制(一般用的比较少)
				导航守卫的作用:可以控制当前本次路由跳转是否能够成功,以及去往哪里
				通过服务器返回的roles数组配合项目提前准备好的权限对象,可以获取到当前账号所允许访问的路由地址数组
				
				最终:在用户执行路由跳转的时候,执行导航守卫,在导航守卫中,根据当前跳转的路径去允许访问的路由地址数组查找是否具有该路径
					如果找到就允许跳转,如果没找到就直接返回之前的路由

			2.使用路由器配合routes数组,动态注入允许当前用户可以访问的路由
				前言:我们都知道,如果当前的地址路径与已注册的某个路由中的path相同,那么router-view标签就会展示对应的路由组件
					反之,只要我们不注册某个路由,那么用户是绝对无法进入到那个路由


			如果用户不具有进入某个路由的资格,那么我们就不去注册该路由

			流程:
				1.项目启动的时候,我们只注入常量路由(所有人都能使用的路由)
				2.当用户登录成功之后,需要根据用户的权限来过滤异步路由,从而得到一个新的数组
				3.再将得到的最新的异步路由数组动态注入路由中
					语法:router.addRoutes(routes: Array<RouteConfig>)








				