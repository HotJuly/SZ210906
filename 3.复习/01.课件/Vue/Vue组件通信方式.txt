1.props
	适用场景:父子组件通信
	props会实现接收标签属性的结果

	父传子
	流程:
		父组件将数据通过子组件标签的标签属性进行传递
		子组件声明props,用于接收父组件传递的属性

		父组件传递的是真正的数据

	子传父
	流程:
		父组件通过标签属性将自己methods中的函数传递给子组件
		子组件通过props接受父组件传递下来的函数
		子组件调用该函数,并向函数内部传入数据

		父组件传递的是接收数据的函数
			注意:因为组件methods中的方法,this已经被强行指定为当前组件实例对象

		
2.provide/inject
	适用场景:祖孙组件通信
	流程:
		1.祖先组件通过在配置对象中添加provide属性,属性值为一个对象
		2.后代组件通过在配置对象中添加inject属性,属性值为数组,数组内部书写需要接收的provide属性
		3.后代组件可以将接收到的provide数据作为data进行使用

	注意:
		1.provide暴露的数据默认不是响应式对象,所以没有响应式的特点
		2.可以使用Vue.observable方法将一个对象变成响应式对象,然后在通过provide暴露给后代组件使用
		3.可以在祖先组件中,通过this._provided找到暴露出去的provide数据,并对其进行修改

3.自定义事件
	v-model(双向数据绑定)
		两种使用方式
			对input标签使用
				1.将data中的状态数据做为input框的默认值进行展示
				2.当input框的内容发生变化时,同步修改data中对应的状态数据
					监听的事件名:input

    				<input type="text" :value="msg" @input="handleInput">

			对组件标签使用
				1.将data中的状态数据作为组件的标签属性进行传递(默认属性名为value)
				2.给子组件标签绑定了自定义事件,当子组件触发该自定义事件,可以通知父组件对状态进行修改(默认事件名为input)

    				<HelloWorld :value="msg" @input="data=>msg=data"/>


			注意:配置对象中的model属性,可以自定义当前组件接受的v-model的属性名以及事件名称


4.找到对应的组件实例对象
	1.$parent
		通过this.$parent可以获取到父组件的实例对象,从而获取到父组件的所有内容(父组件能看到,你都能得到)

	2.$root
		通过this.$root可以获取到根组件实例对象

	3.$children
		通过this.$children可以获取到子组件的实例对象组成的数组

		注意:$children 并不保证顺序，也不是响应式的
			如果子组件存在异步组件的情况,该数组中的顺序与页面上显示顺序会不相同
			就算将该数组中的内容顺序进行调换,页面上的组件展示顺序也不会发生变化

	4.$refs
		使用方法:
			1.在当前组件的template中,给某些标签或者组件添加上ref标签属性
			2.在组件代码中,使用this.$refs.标识名称就可以找到对应的组件或者标签
		
		对标签使用
			可以获得被标记的元素,挂载之后的真实DOM

		对组件使用
			可以获得被标记的组件生成的实例对象






















