1.props
	适用场景:父子组件通信
	props会实现接收标签属性的结果

	父传子
	流程:
		父组件将数据通过子组件标签的标签属性进行传递
		子组件声明props,用于接收父组件传递的属性

		父组件传递的是真正的数据

	子传父
	流程:
		父组件通过标签属性将自己methods中的函数传递给子组件
		子组件通过props接受父组件传递下来的函数
		子组件调用该函数,并向函数内部传入数据

		父组件传递的是接收数据的函数
			注意:因为组件methods中的方法,this已经被强行指定为当前组件实例对象

		
2.provide/inject
	适用场景:祖孙组件通信
	流程:
		1.祖先组件通过在配置对象中添加provide属性,属性值为一个对象
		2.后代组件通过在配置对象中添加inject属性,属性值为数组,数组内部书写需要接收的provide属性
		3.后代组件可以将接收到的provide数据作为data进行使用

	注意:
		1.provide暴露的数据默认不是响应式对象,所以没有响应式的特点
		2.可以使用Vue.observable方法将一个对象变成响应式对象,然后在通过provide暴露给后代组件使用
		3.可以在祖先组件中,通过this._provided找到暴露出去的provide数据,并对其进行修改







